// -*- mode: groovy -*-

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

// timeout in minutes
max_time = 180

node('restricted-utility') {
  // Loading the utilities requires a node context unfortunately
  checkout scm
  utils = load('ci/Jenkinsfile_utils.groovy')
  custom_steps = load('cd/Jenkins_steps.groovy')
}
utils.assign_node_labels(utility: 'restricted-utility', linux_cpu: 'restricted-mxnetlinux-cpu')

utils.main_wrapper(
core_logic: {
  utils.parallel_stage('Build', [
    custom_steps.compile_unix_static_cpu(),
    // custom_steps.compile_unix_static_cpu_mkl()
  ])

  utils.parallel_stage('Tests', [
    // test autograd is stalling for python2 - no idea why
    // but this is stopping the pipeline
    // custom_steps.test_unix_python2_cpu(),
    // custom_steps.test_unix_python3_cpu(),
    // custom_steps.test_unix_python2_mkldnn_cpu(),
    // custom_steps.test_unix_python3_mkldnn_cpu(),
    /*  Disabled due to master build failure:
     *  http://jenkins.mxnet-ci.amazon-ml.com/blue/organizations/jenkins/incubator-mxnet/detail/master/1221/pipeline/
     *  https://github.com/apache/incubator-mxnet/issues/11801
    custom_steps.test_unix_distributed_kvstore_cpu()
    */
  ])

  utils.parallel_stage('Package Pip', [
    custom_steps.pip_package_unix(),
    //custom_steps.pip_package_unix_mkl(),
  ])

  utils.parallel_stage('Package Docker', [
    custom_steps.docker_build_cpu('cpu', '1.4.0', true),
    custom_steps.docker_build_cpu('cpu', '1.4.0', false)
  ])
}
,
failure_handler: {
  // Only send email if master or release branches failed
  if (currentBuild.result == "FAILURE" && (env.BRANCH_NAME == "master" || env.BRANCH_NAME.startsWith("v"))) {
    emailext body: 'Build for MXNet branch ${BRANCH_NAME} has broken. Please view the build at ${BUILD_URL}', replyTo: '${EMAIL}', subject: '[BUILD FAILED] Branch ${BRANCH_NAME} build ${BUILD_NUMBER}', to: '${EMAIL}'
  }
}
)
